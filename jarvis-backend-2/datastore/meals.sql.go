// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: meals.sql

package datastore

import (
	"context"
)

const createMeal = `-- name: CreateMeal :one
INSERT INTO meals (name, category) VALUES ($1, $2) RETURNING id, name, category
`

type CreateMealParams struct {
	Name     string
	Category string
}

func (q *Queries) CreateMeal(ctx context.Context, arg CreateMealParams) (Meal, error) {
	row := q.db.QueryRow(ctx, createMeal, arg.Name, arg.Category)
	var i Meal
	err := row.Scan(&i.ID, &i.Name, &i.Category)
	return i, err
}

const deleteMeal = `-- name: DeleteMeal :exec
DELETE FROM meals WHERE id = $1
`

func (q *Queries) DeleteMeal(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteMeal, id)
	return err
}

const getMeal = `-- name: GetMeal :one
SELECT id, name, category FROM meals WHERE id = $1
`

func (q *Queries) GetMeal(ctx context.Context, id int32) (Meal, error) {
	row := q.db.QueryRow(ctx, getMeal, id)
	var i Meal
	err := row.Scan(&i.ID, &i.Name, &i.Category)
	return i, err
}

const getMeals = `-- name: GetMeals :many
SELECT id, name, category FROM meals
`

func (q *Queries) GetMeals(ctx context.Context) ([]Meal, error) {
	rows, err := q.db.Query(ctx, getMeals)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Meal
	for rows.Next() {
		var i Meal
		if err := rows.Scan(&i.ID, &i.Name, &i.Category); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchMeals = `-- name: SearchMeals :many
SELECT id, name, category FROM meals WHERE name ILIKE '%' || $1::text || '%'
`

func (q *Queries) SearchMeals(ctx context.Context, searchterm string) ([]Meal, error) {
	rows, err := q.db.Query(ctx, searchMeals, searchterm)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Meal
	for rows.Next() {
		var i Meal
		if err := rows.Scan(&i.ID, &i.Name, &i.Category); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMeal = `-- name: UpdateMeal :one
UPDATE meals SET name = $1, category = $2 WHERE id = $3 RETURNING id, name, category
`

type UpdateMealParams struct {
	Name     string
	Category string
	ID       int32
}

func (q *Queries) UpdateMeal(ctx context.Context, arg UpdateMealParams) (Meal, error) {
	row := q.db.QueryRow(ctx, updateMeal, arg.Name, arg.Category, arg.ID)
	var i Meal
	err := row.Scan(&i.ID, &i.Name, &i.Category)
	return i, err
}
