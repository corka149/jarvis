import Config

# ##### ##### ##### ##### ##### ##### ##### ##### ##### #####
# ##### ##### ##### ##### ##### ##### ##### ##### ##### #####
#                   !!! WARNING !!!
# This file IS ONLY still here for debugging MIX_ENV=prod
#
# ##### ##### ##### ##### ##### ##### ##### ##### ##### #####
# ##### ##### ##### ##### ##### ##### ##### ##### ##### #####

# For production, don't forget to configure the url host
# to something meaningful, Phoenix uses this information
# when generating URLs.
#
# Note we also include the path to a cache manifest
# containing the digested version of static files. This
# manifest is generated by the `mix phx.digest` task,
# which you should run after static files are built and
# before starting your production server.
config :jarvis, JarvisWeb.Endpoint,
  http: [:inet6, port: System.get_env("PORT") || 4000],
  # This is critical for ensuring web-sockets properly authorize.
  url: [host: System.get_env("HOST") || "localhost", port: System.get_env("PORT") || 4000],
  server: true,
  root: ".",
  version: Application.spec(:jarvis, :vsn)

# Do not print debug messages in production
config :logger, level: :info

# ## SSL Support
#
# To get SSL working, you will need to add the `https` key
# to the previous section and set your `:url` port to 443:
#
#     config :jarvis, JarvisWeb.Endpoint,
#       ...
#       url: [host: "example.com", port: 443],
#       https: [
#         :inet6,
#         port: 443,
#         cipher_suite: :strong,
#         keyfile: System.get_env("SOME_APP_SSL_KEY_PATH"),
#         certfile: System.get_env("SOME_APP_SSL_CERT_PATH")
#       ]
#
# The `cipher_suite` is set to `:strong` to support only the
# latest and more secure SSL ciphers. This means old browsers
# and clients may not be supported. You can set it to
# `:compatible` for wider support.
#
# `:keyfile` and `:certfile` expect an absolute path to the key
# and cert in disk or a relative path inside priv, for example
# "priv/ssl/server.key". For all supported SSL configuration
# options, see https://hexdocs.pm/plug/Plug.SSL.html#configure/1
#
# We also recommend setting `force_ssl` in your endpoint, ensuring
# no data is ever sent via http, always redirecting to https:
#
#     config :jarvis, JarvisWeb.Endpoint,
#       force_ssl: [hsts: true]
#
# Check `Plug.SSL` for all available options in `force_ssl`.

# ## Using releases (distillery)
#
# If you are doing OTP releases, you need to instruct Phoenix
# to start the server for all endpoints:
#
#     config :phoenix, :serve_endpoints, true
config :phoenix, :serve_endpoints, true
#
# Alternatively, you can configure exactly which server to
# start per endpoint:
#
#     config :jarvis, JarvisWeb.Endpoint, server: true
#

config :jarvis,
  authorization_key: System.get_env("JARVIS_AUTHORIZATION_KEY")

config :jarvis, JarvisWeb.Endpoint,
  secret_key_base: System.get_env("SECRET_KEY_BASE")

# Configure your database
config :jarvis, Jarvis.Repo,
  username: System.get_env("DB_USERNAME") || "postgres",
  password: System.get_env("DB_PASSWORD") || "secret",
  database: System.get_env("DB_NAME") || "jarvis_dev",
  hostname: System.get_env("DB_HOST") || "localhost",
  pool_size: 15

config :ueberauth, Ueberauth,
  providers: [
    github: {Ueberauth.Strategy.Github, [callback_path: (System.get_env("GITHUB_CALLBACK_PATH_PREFIX") || "") <> "/auth/github/callback"]}
  ]

config :ueberauth, Ueberauth.Strategy.Github.OAuth,
  client_id: System.get_env("GITHUB_CLIENT_ID"),
  client_secret: System.get_env("GITHUB_CLIENT_SECRET")
